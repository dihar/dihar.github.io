/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@calendar-name: 'calendar';
@calendar-x: 18px;
@calendar-y: 0px;
@calendar-offset-x: -18px;
@calendar-offset-y: 0px;
@calendar-width: 18px;
@calendar-height: 19px;
@calendar-total-width: 54px;
@calendar-total-height: 36px;
@calendar-image: './dist/imgs/sprite.png';
@calendar: 18px 0px -18px 0px 18px 19px 54px 36px './dist/imgs/sprite.png' 'calendar';
@cap-name: 'cap';
@cap-x: 36px;
@cap-y: 0px;
@cap-offset-x: -36px;
@cap-offset-y: 0px;
@cap-width: 18px;
@cap-height: 17px;
@cap-total-width: 54px;
@cap-total-height: 36px;
@cap-image: './dist/imgs/sprite.png';
@cap: 36px 0px -36px 0px 18px 17px 54px 36px './dist/imgs/sprite.png' 'cap';
@diploma-name: 'diploma';
@diploma-x: 0px;
@diploma-y: 0px;
@diploma-offset-x: 0px;
@diploma-offset-y: 0px;
@diploma-width: 18px;
@diploma-height: 23px;
@diploma-total-width: 54px;
@diploma-total-height: 36px;
@diploma-image: './dist/imgs/sprite.png';
@diploma: 0px 0px 0px 0px 18px 23px 54px 36px './dist/imgs/sprite.png' 'diploma';
@money-name: 'money';
@money-x: 0px;
@money-y: 23px;
@money-offset-x: 0px;
@money-offset-y: -23px;
@money-width: 18px;
@money-height: 13px;
@money-total-width: 54px;
@money-total-height: 36px;
@money-image: './dist/imgs/sprite.png';
@money: 0px 23px 0px -23px 18px 13px 54px 36px './dist/imgs/sprite.png' 'money';
@spritesheet-width: 54px;
@spritesheet-height: 36px;
@spritesheet-image: './dist/imgs/sprite.png';
@spritesheet-sprites: @calendar @cap @diploma @money;
@spritesheet: 54px 36px './dist/imgs/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
